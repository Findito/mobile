//
//  findito.proto
//  mobile
//
//  Created by Andrzej WÃ³jciak on 16/05/2025.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: findito.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - findito.FinditoService

/// Namespace containing generated types for the "findito.FinditoService" service.
internal enum Findito_FinditoService {
    /// Service descriptor for the "findito.FinditoService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "findito.FinditoService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "ReportFoundItem" metadata.
        internal enum ReportFoundItem {
            /// Request type for "ReportFoundItem".
            internal typealias Input = Findito_ReportFoundItemRequest
            /// Response type for "ReportFoundItem".
            internal typealias Output = Findito_ReportFoundItemResponse
            /// Descriptor for "ReportFoundItem".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "findito.FinditoService"),
                method: "ReportFoundItem"
            )
        }
        /// Namespace for "SearchItemsAlongRoute" metadata.
        internal enum SearchItemsAlongRoute {
            /// Request type for "SearchItemsAlongRoute".
            internal typealias Input = Findito_SearchItemsAlongRouteRequest
            /// Response type for "SearchItemsAlongRoute".
            internal typealias Output = Findito_SearchItemsAlongRouteResponse
            /// Descriptor for "SearchItemsAlongRoute".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "findito.FinditoService"),
                method: "SearchItemsAlongRoute"
            )
        }
        /// Namespace for "TrackNearbyItems" metadata.
        internal enum TrackNearbyItems {
            /// Request type for "TrackNearbyItems".
            internal typealias Input = Findito_LocationUpdate
            /// Response type for "TrackNearbyItems".
            internal typealias Output = Findito_FoundItem
            /// Descriptor for "TrackNearbyItems".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "findito.FinditoService"),
                method: "TrackNearbyItems"
            )
        }
        /// Descriptors for all methods in the "findito.FinditoService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            ReportFoundItem.descriptor,
            SearchItemsAlongRoute.descriptor,
            TrackNearbyItems.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "findito.FinditoService" service.
    internal static let findito_FinditoService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "findito.FinditoService")
}

// MARK: findito.FinditoService (client)

extension Findito_FinditoService {
    /// Generated client protocol for the "findito.FinditoService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "ReportFoundItem" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Findito_ReportFoundItemRequest` message.
        ///   - serializer: A serializer for `Findito_ReportFoundItemRequest` messages.
        ///   - deserializer: A deserializer for `Findito_ReportFoundItemResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func reportFoundItem<Result>(
            request: GRPCCore.ClientRequest<Findito_ReportFoundItemRequest>,
            serializer: some GRPCCore.MessageSerializer<Findito_ReportFoundItemRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_ReportFoundItemResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_ReportFoundItemResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SearchItemsAlongRoute" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Findito_SearchItemsAlongRouteRequest` message.
        ///   - serializer: A serializer for `Findito_SearchItemsAlongRouteRequest` messages.
        ///   - deserializer: A deserializer for `Findito_SearchItemsAlongRouteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func searchItemsAlongRoute<Result>(
            request: GRPCCore.ClientRequest<Findito_SearchItemsAlongRouteRequest>,
            serializer: some GRPCCore.MessageSerializer<Findito_SearchItemsAlongRouteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_SearchItemsAlongRouteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_SearchItemsAlongRouteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "TrackNearbyItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stream
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Findito_LocationUpdate` messages.
        ///   - serializer: A serializer for `Findito_LocationUpdate` messages.
        ///   - deserializer: A deserializer for `Findito_FoundItem` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func trackNearbyItems<Result>(
            request: GRPCCore.StreamingClientRequest<Findito_LocationUpdate>,
            serializer: some GRPCCore.MessageSerializer<Findito_LocationUpdate>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_FoundItem>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Findito_FoundItem>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "findito.FinditoService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ReportFoundItem" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Findito_ReportFoundItemRequest` message.
        ///   - serializer: A serializer for `Findito_ReportFoundItemRequest` messages.
        ///   - deserializer: A deserializer for `Findito_ReportFoundItemResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func reportFoundItem<Result>(
            request: GRPCCore.ClientRequest<Findito_ReportFoundItemRequest>,
            serializer: some GRPCCore.MessageSerializer<Findito_ReportFoundItemRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_ReportFoundItemResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_ReportFoundItemResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Findito_FinditoService.Method.ReportFoundItem.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SearchItemsAlongRoute" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Findito_SearchItemsAlongRouteRequest` message.
        ///   - serializer: A serializer for `Findito_SearchItemsAlongRouteRequest` messages.
        ///   - deserializer: A deserializer for `Findito_SearchItemsAlongRouteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func searchItemsAlongRoute<Result>(
            request: GRPCCore.ClientRequest<Findito_SearchItemsAlongRouteRequest>,
            serializer: some GRPCCore.MessageSerializer<Findito_SearchItemsAlongRouteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_SearchItemsAlongRouteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_SearchItemsAlongRouteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Findito_FinditoService.Method.SearchItemsAlongRoute.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "TrackNearbyItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stream
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Findito_LocationUpdate` messages.
        ///   - serializer: A serializer for `Findito_LocationUpdate` messages.
        ///   - deserializer: A deserializer for `Findito_FoundItem` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func trackNearbyItems<Result>(
            request: GRPCCore.StreamingClientRequest<Findito_LocationUpdate>,
            serializer: some GRPCCore.MessageSerializer<Findito_LocationUpdate>,
            deserializer: some GRPCCore.MessageDeserializer<Findito_FoundItem>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Findito_FoundItem>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Findito_FinditoService.Method.TrackNearbyItems.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Findito_FinditoService.ClientProtocol {
    /// Call the "ReportFoundItem" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Unary
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Findito_ReportFoundItemRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportFoundItem<Result>(
        request: GRPCCore.ClientRequest<Findito_ReportFoundItemRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_ReportFoundItemResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.reportFoundItem(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Findito_ReportFoundItemRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Findito_ReportFoundItemResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchItemsAlongRoute" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Findito_SearchItemsAlongRouteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func searchItemsAlongRoute<Result>(
        request: GRPCCore.ClientRequest<Findito_SearchItemsAlongRouteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_SearchItemsAlongRouteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.searchItemsAlongRoute(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Findito_SearchItemsAlongRouteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Findito_SearchItemsAlongRouteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TrackNearbyItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stream
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Findito_LocationUpdate` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func trackNearbyItems<Result>(
        request: GRPCCore.StreamingClientRequest<Findito_LocationUpdate>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Findito_FoundItem>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.trackNearbyItems(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Findito_LocationUpdate>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Findito_FoundItem>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Findito_FinditoService.ClientProtocol {
    /// Call the "ReportFoundItem" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Unary
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportFoundItem<Result>(
        _ message: Findito_ReportFoundItemRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_ReportFoundItemResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Findito_ReportFoundItemRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.reportFoundItem(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchItemsAlongRoute" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func searchItemsAlongRoute<Result>(
        _ message: Findito_SearchItemsAlongRouteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Findito_SearchItemsAlongRouteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Findito_SearchItemsAlongRouteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.searchItemsAlongRoute(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TrackNearbyItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stream
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func trackNearbyItems<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Findito_LocationUpdate>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Findito_FoundItem>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Findito_LocationUpdate>(
            metadata: metadata,
            producer: producer
        )
        return try await self.trackNearbyItems(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}
